// Generated by CoffeeScript 1.9.0
(function() {
  var controller, model, view;

  model = {
    data: {},
    set: function(props) {
      $.extend(true, this.data, props);
      return AutoHUD.view.render(this.getAll());
    },
    get: function(prop) {
      return this.data[prop];
    },
    getAll: function() {
      return this.data;
    }
  };

  view = {
    render: function(nextProps) {
      if (this.lastProps != null) {
        if (_.isEqual(this.lastProps, nextProps)) {
          return;
        }
      }
      $("body").html(this.presentationTemplate({
        d: nextProps
      }));
      return this.lastProps = $.extend(true, {}, nextProps);
    },
    makeTemplates: function() {
      return this.presentationTemplate = _.template($("#presentation-template").html());
    }
  };

  controller = {
    weatherPollTime: 1000 * 60 * 5,
    weatherUrl: "https://api.forecast.io/forecast/",
    months: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
    setWatchers: function() {
      this.watchTime();
      return this.watchWeather();
    },
    watchTime: function() {
      return this.timeWatcher = setInterval((function(_this) {
        return function() {
          return _this.setTime();
        };
      })(this), 1000);
    },
    setTime: function() {
      var d, month, seconds;
      d = new Date();
      seconds = d.getSeconds();
      if (seconds < 10) {
        seconds = "0" + seconds;
      }
      month = this.months[d.getMonth()];
      return this.model.set({
        time: (d.getHours()) + ":" + (d.getMinutes()) + ":" + seconds,
        date: month + " " + (d.getDate()) + ", " + (d.getFullYear())
      });
    },
    watchWeather: function() {
      this.getWeather();
      return setInterval((function(_this) {
        return function() {
          return _this.getWeather();
        };
      })(this), this.weatherPollTime);
    },
    getWeather: function() {
      var url;
      url = "" + this.weatherUrl + (this.model.get("forecastioApiKey")) + "/" + (this.model.get("forecastioLatLong"));
      return $.getJSON(url + "?callback=?", (function(_this) {
        return function(data) {
          return _this.formatWeather(data);
        };
      })(this));
    },

    /*
    	Format weather data from forecast.io into something a little more simple:
    	current: 75ยบ, rain
    	today: 65ยบ-77ยบ, rain in the afternoon
     */
    formatWeather: function(data) {
      var today, weather;
      weather = {
        current: {},
        today: {}
      };
      weather.current.temperature = this.formatTemperature(data.currently.apparentTemperature);
      weather.current.summary = data.currently.summary;
      weather.current.icon = data.currently.icon;
      today = data.daily.data[0];
      weather.today.low = this.formatTemperature(today.temperatureMin);
      weather.today.high = this.formatTemperature(today.temperatureMax);
      weather.today.summary = today.summary;
      weather.today.icon = today.icon;
      return this.model.set({
        weather: weather
      });
    },
    formatTemperature: function(temperature) {
      temperature = Math.round(temperature);
      return temperature + "ยบF";
    }
  };

  window.AutoHUD = {
    versionPollTime: 5000,
    model: model,
    view: view,
    controller: controller,
    init: function(params) {
      this.model.view = this.view;
      this.model.controller = this.controller;
      this.view.model = this.model;
      this.view.controller = this.controller;
      this.controller.model = this.model;
      this.controller.view = this.view;
      this.view.makeTemplates();
      if (params.version == null) {
        window.location.reload();
      } else {
        this.version = params.version;
      }
      this.model.set(params);
      this.versionWatcher = setInterval((function(_this) {
        return function() {
          return _this.fetchVersion();
        };
      })(this), this.versionPollTime);
      return this.controller.setWatchers();
    },
    fetchVersion: function() {
      return $.ajax("/version", {
        type: "GET",
        success: (function(_this) {
          return function(data) {
            return _this.parseVersion(data);
          };
        })(this),
        error: (function(_this) {
          return function() {
            return console.log("no response from the version watcher; the server must be down.");
          };
        })(this)
      });
    },
    parseVersion: function(data) {
      if (data.version == null) {
        return;
      }
      if (data.version !== this.version) {
        return window.location.reload();
      }
    }
  };

}).call(this);
